type Query {
    users: [User!]!
    user(id:ID!): User,
    latestUsers: [User!]
}

type User {
    id: ID!,
    name: String!,
    email: String!,
    password: String!,
}

type Mutation {
    addUser(id: ID, name: String!, email:String!, password: String!): User,
    editUser(id:ID!, name:String, email:String, password:String): User,
    deleteUser(id:ID!): Boolean!
}

# Un fragment GraphQL permet de regrouper un ensemble de sous-champs appartenant à un type Object
# Il va permettre de récupérer ces sous-champs rapidement et facilement (par exemple, lorsque l'on execute des comparaisons entre plusieurs données).
# On a la possibilité de créer des variables nous permettant simplement de choisir des valeurs dynamiques
# Directives :
# - @include (si True, on récupère la donnée et inversement)
# - @skip (le contraire de include)
# - @deprecated('') : permet de préciser si un sous-champ n'est plus utilisé
