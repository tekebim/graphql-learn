# GraphQL

# Schema contient les types objets
# Les types objets vont représenter les requêtes que l'on va pouvoir executer
# Ainsi que les données que l'on va pouvoir récupérer

# Resolver va exécuter les requêtes et récupérer réellement les données

# GraphQL ne fonctionne qu'avec des VERB : POST
# GraphQL comporte trois types objets par défaut :
# - Query (va gérer les requêtes)
# - Mutation (va gérer l'ajout / modification / suppression de nouvelles données)

type Query {
    # On va préciser les requêtes que l'on peut exécuter dans le resolver
    # Le type Query est natif à GraphQL
    test: String, # la requête doit retourner une valeur de type String
    movies: [Movie] # pour récupérer plusieurs données on va ajouter des crochets (array) avec le type d'objet retourné
    # Ici la requête movies aura pour rôle de récupérer des films
    movie(id: ID!): Movie # On récupère un seul film avec son ID (ce qui se trouve entre parenthèses)
}

# Type scalaire :
# - String
# - Int
# - Float
# - Boolean
# - ID

type Movie {
    # Movie n'est pas natif c'est un type d'objet personnalisé
    id: ID!,
    title: String,
    plot: String
}

# under-fetching : le fait de ne pas récupérer assez de données par rapport à ce qui est demandé.
# over-fetching : je veux récupérer juste une donnée des utilisateurs, je récupère la totalité.
